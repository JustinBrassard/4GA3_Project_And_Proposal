zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
rm(list = ls())
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
library(dplyr)
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
#test plots
ggplot(data = Collisions.sf) +
geom_sf() +
labs(title = "Collisions")
ggplot(data = School_Zones.sf) +
geom_sf() +
labs(title = "School Zone Locations")
ggplot(data = Schools.sf) +
geom_sf() +
labs(title = "School Locations")
ggplot() +
geom_sf(data = Schools.sf, color = "grey") +
geom_sf(data = School_Zones.sf, color = "yellow") +
geom_sf(data = Collisions.sf, color = "red") +
labs(title = "Collisions & Schools & School Zones")
#icon creation for main leaflet (TEST)
schoolIcon <- makeIcon(
iconUrl = "https://www.freeiconspng.com/uploads/school-house-icon-16.png",
iconWidth = 30, iconHeight = 30
)
zonesIcon <- makeIcon(
iconUrl = "https://www.freeiconspng.com/uploads/school-icon-png-40.png",
iconWidth = 30, iconHeight = 30
)
collisionsIcon <- makeIcon(
iconUrl = "https://www.freeiconspng.com/uploads/-alert-attention-danger-exclamation-safety-warning-icon--icon--33.png",
iconWidth = 30, iconHeight = 30
)
#Main data sets leaflet (TEST)
overview.map <- leaflet() %>% addTiles() %>%
addMarkers(data = Collisions.sf, icon = collisionsIcon) %>%
addMarkers(data = School_Zones.sf, icon = zonesIcon) %>%
addMarkers(data = Schools.sf, icon = schoolIcon)
overview.map
summary(collisions.ppp)
#Conversion of WGS84 lat and lng points to corresponding UTM15N eastings and northings
CollisionsXY <- Collisions %>%
select(lng, lat)
CollisionsXY$lat <- as.numeric(CollisionsXY$lat)
CollisionsXY$lng <- as.numeric(CollisionsXY$lng)
coordinates(CollisionsXY) <- c("lng", "lat")
proj4string(CollisionsXY) <- CRS("+proj=longlat +datum=WGS84")
Collisions.trfm <- spTransform(CollisionsXY, CRS("+proj=utm +zone=15 ellps=WGS84"))
CollisionsPCS <- as(Collisions.trfm, "SpatialPoints")
#USE FOR QUADRAT
CollisionsPCS.sf <- st_as_sf(CollisionsPCS)
#######################################################################################
SchoolsXY <- Schools %>%
select(lng, lat)
SchoolsXY$lat <- as.numeric(SchoolsXY$lat)
SchoolsXY$lng <- as.numeric(SchoolsXY$lng)
coordinates(SchoolsXY) <- c("lng", "lat")
proj4string(SchoolsXY) <- CRS("+proj=longlat +datum=WGS84")
Schools.trfm <- spTransform(SchoolsXY, CRS("+proj=utm +zone=15 ellps=WGS84"))
Schools.trfm
SchoolsPCS <- as(Schools.trfm, "SpatialPoints")
#USE FOR QUADRAT
SchoolsPCS.sf <- st_as_sf(SchoolsPCS)
#######################################################################################
School_ZonesXY <- School_Zones %>%
select(lng, lat)
School_ZonesXY$lat <- as.numeric(School_ZonesXY$lat)
School_ZonesXY$lng <- as.numeric(School_ZonesXY$lng)
coordinates(School_ZonesXY) <- c("lng", "lat")
proj4string(School_ZonesXY) <- CRS("+proj=longlat +datum=WGS84")
School_Zones.trfm <- spTransform(School_ZonesXY, CRS("+proj=utm +zone=15 ellps=WGS84"))
School_Zones.trfm
School_ZonesPCS <- as(School_Zones.trfm, "SpatialPoints")
#USE FOR QUADRAT
School_ZonesPCS.sf <- st_as_sf(School_ZonesPCS)
#######################################################################################
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM15N
coordinates(Toronto_Points) <- c("LNG", "LAT")
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM15N
coordinates(Toronto_Points) <- c("LNG", "LAT")
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM15N
coordinates(toronto_points) <- c("LNG", "LAT")
View(toronto_points)
#Conversion of WGS84 lat and lng points to corresponding UTM17N eastings and northings
CollisionsXY <- Collisions %>%
select(lng, lat)
CollisionsXY$lat <- as.numeric(CollisionsXY$lat)
CollisionsXY$lng <- as.numeric(CollisionsXY$lng)
coordinates(CollisionsXY) <- c("lng", "lat")
proj4string(CollisionsXY) <- CRS("+proj=longlat +datum=WGS84")
Collisions.trfm <- spTransform(CollisionsXY, CRS("+proj=utm +zone=17 ellps=WGS84"))
CollisionsPCS <- as(Collisions.trfm, "SpatialPoints")
#USE FOR QUADRAT
CollisionsPCS.sf <- st_as_sf(CollisionsPCS)
#######################################################################################
SchoolsXY <- Schools %>%
select(lng, lat)
SchoolsXY$lat <- as.numeric(SchoolsXY$lat)
SchoolsXY$lng <- as.numeric(SchoolsXY$lng)
coordinates(SchoolsXY) <- c("lng", "lat")
proj4string(SchoolsXY) <- CRS("+proj=longlat +datum=WGS84")
Schools.trfm <- spTransform(SchoolsXY, CRS("+proj=utm +zone=17 ellps=WGS84"))
Schools.trfm
SchoolsPCS <- as(Schools.trfm, "SpatialPoints")
#USE FOR QUADRAT
SchoolsPCS.sf <- st_as_sf(SchoolsPCS)
#######################################################################################
School_ZonesXY <- School_Zones %>%
select(lng, lat)
School_ZonesXY$lat <- as.numeric(School_ZonesXY$lat)
School_ZonesXY$lng <- as.numeric(School_ZonesXY$lng)
coordinates(School_ZonesXY) <- c("lng", "lat")
proj4string(School_ZonesXY) <- CRS("+proj=longlat +datum=WGS84")
School_Zones.trfm <- spTransform(School_ZonesXY, CRS("+proj=utm +zone=17 ellps=WGS84"))
School_Zones.trfm
School_ZonesPCS <- as(School_Zones.trfm, "SpatialPoints")
#USE FOR QUADRAT
School_ZonesPCS.sf <- st_as_sf(School_ZonesPCS)
#######################################################################################
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM17N
coordinates(toronto_points) <- c("LNG", "LAT")
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM17N
coordinates(Toronto_Points) <- c("LNG", "LAT")
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM17N
coordinates(toronto_points) <- c("LNG", "LAT")
View(toronto_points)
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM17N
coordinates(toronto_points) <- c("lng", "lat")
View(SchoolsXY)
View(Schools.trfm)
Toronto_Points.df <- as.data.frame(Toronto_Points)
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM17N
coordinates(toronto_points) <- c("lng", "lat")
View(Schools)
rm(list = ls())
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
library(dplyr)
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
library(dplyr)
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
rm(list = ls())
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
library(dplyr)
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
#test plots
ggplot(data = Collisions.sf) +
geom_sf() +
labs(title = "Collisions")
ggplot(data = School_Zones.sf) +
geom_sf() +
labs(title = "School Zone Locations")
ggplot(data = Schools.sf) +
geom_sf() +
labs(title = "School Locations")
ggplot() +
geom_sf(data = Schools.sf, color = "grey") +
geom_sf(data = School_Zones.sf, color = "yellow") +
geom_sf(data = Collisions.sf, color = "red") +
labs(title = "Collisions & Schools & School Zones")
#icon creation for main leaflet (TEST)
schoolIcon <- makeIcon(
iconUrl = "https://www.freeiconspng.com/uploads/school-house-icon-16.png",
iconWidth = 30, iconHeight = 30
)
zonesIcon <- makeIcon(
iconUrl = "https://www.freeiconspng.com/uploads/school-icon-png-40.png",
iconWidth = 30, iconHeight = 30
)
collisionsIcon <- makeIcon(
iconUrl = "https://www.freeiconspng.com/uploads/-alert-attention-danger-exclamation-safety-warning-icon--icon--33.png",
iconWidth = 30, iconHeight = 30
)
#Main data sets leaflet (TEST)
overview.map <- leaflet() %>% addTiles() %>%
addMarkers(data = Collisions.sf, icon = collisionsIcon) %>%
addMarkers(data = School_Zones.sf, icon = zonesIcon) %>%
addMarkers(data = Schools.sf, icon = schoolIcon)
overview.map
#Conversion of WGS84 lat and lng points to corresponding UTM17N eastings and northings
CollisionsXY <- Collisions %>%
select(lng, lat)
CollisionsXY$lat <- as.numeric(CollisionsXY$lat)
CollisionsXY$lng <- as.numeric(CollisionsXY$lng)
coordinates(CollisionsXY) <- c("lng", "lat")
proj4string(CollisionsXY) <- CRS("+proj=longlat +datum=WGS84")
Collisions.trfm <- spTransform(CollisionsXY, CRS("+proj=utm +zone=17 ellps=WGS84"))
CollisionsPCS <- as(Collisions.trfm, "SpatialPoints")
#USE FOR QUADRAT
CollisionsPCS.sf <- st_as_sf(CollisionsPCS)
#######################################################################################
SchoolsXY <- Schools %>%
select(lng, lat)
SchoolsXY$lat <- as.numeric(SchoolsXY$lat)
SchoolsXY$lng <- as.numeric(SchoolsXY$lng)
coordinates(SchoolsXY) <- c("lng", "lat")
proj4string(SchoolsXY) <- CRS("+proj=longlat +datum=WGS84")
Schools.trfm <- spTransform(SchoolsXY, CRS("+proj=utm +zone=17 ellps=WGS84"))
Schools.trfm
SchoolsPCS <- as(Schools.trfm, "SpatialPoints")
#USE FOR QUADRAT
SchoolsPCS.sf <- st_as_sf(SchoolsPCS)
#######################################################################################
School_ZonesXY <- School_Zones %>%
select(lng, lat)
School_ZonesXY$lat <- as.numeric(School_ZonesXY$lat)
School_ZonesXY$lng <- as.numeric(School_ZonesXY$lng)
coordinates(School_ZonesXY) <- c("lng", "lat")
proj4string(School_ZonesXY) <- CRS("+proj=longlat +datum=WGS84")
School_Zones.trfm <- spTransform(School_ZonesXY, CRS("+proj=utm +zone=17 ellps=WGS84"))
School_Zones.trfm
School_ZonesPCS <- as(School_Zones.trfm, "SpatialPoints")
#USE FOR QUADRAT
School_ZonesPCS.sf <- st_as_sf(School_ZonesPCS)
#######################################################################################
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
#converting points from WGS84 to UTM17N
coordinates(toronto_points) <- c("lng", "lat")
View(toronto_points)
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
toronto <- toronto_points %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#there's an error here. I cut the code block here since the previous part worked.
#converting points from WGS84 to UTM17N
coordinates(toronto) <- c("lng", "lat")
#there's an error here. I cut the code block here since the previous part worked.
#converting points from WGS84 to UTM17N
torontoXY <- toronto %>%
select(lng, lat)
torontoXY$lat <- as.numeric(torontoXY$lat)
torontoXY$lng <- as.numeric(torontoXY$lng)
coordinates(toronto) <- c("lng", "lat")
#there's an error here. I cut the code block here since the previous part worked.
#converting points from WGS84 to UTM17N
torontoXY <- toronto %>%
select(lng, lat)
torontoXY$lat <- as.numeric(torontoXY$lat)
torontoXY$lng <- as.numeric(torontoXY$lng)
coordinates(torontoXY) <- c("lng", "lat")
View(torontoXY)
View(SchoolsXY)
#read shapefile
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
#convert polygon to group of lines
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
#convert lines to points
toronto_points <- st_cast(toronto.lines, to = "POINT")
toronto_points <- as.data.frame(toronto_points)
#AT THIS POINT I EXTRACTED toronto_points AS A CSV AND SEPARATED THE LNG AND LAT IN SHEETS (Toronto_Points)
toronto <- toronto_points %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
View(toronto)
View(Schools)
View(School_Zones)
rm(list = ls())
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
library(dplyr)
#importing necessary files from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
boundsfile <- "https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Toronto%20Boundary%20Points%20UTM15N/Toronto_Points.csv"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
Toronto_Points<-read_csv(url(boundsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
View(Schools)
rm(list = ls())
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
library(dplyr)
#importing necessary files from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
boundsfile <- "https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Toronto%20Boundary%20Points%20UTM15N/Toronto_Points.csv"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
Toronto_Points<-read_csv(url(boundsfile))
View(Toronto_Points)
