summary(toronto.lines)
st_geometry(toronto.lines) <- NULL
Toronto.owin <- as.owin(as(toronto.lines) # Requires `maptools` package
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
st_geometry(toronto.lines) <- NULL
Toronto.owin <- as.owin(as(toronto.lines)) # Requires `maptools` package
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
st_geometry(toronto.lines) <- NULL
plot(toronto.lines)
# Requires `maptools` package
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
st_cast(toronto.lines, to = POINT)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
st_cast(toronto.lines, to = "POINT")
View(toronto.lines)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
st_cast(toronto.lines, to = "POINT")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
st_cast(toronto.lines, to = "POINT")
View(toronto.lines)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
st_cast(toronto.lines, to = "POINT")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
View(toronto_points)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop", row.names = FALSE)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoLines.csv", row.names = false)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoLines.csv")
View(Collisions)
library(readxl)
TorontoPoints <- read_excel("C:/Users/nwals/Downloads/TorontoPoints.xlsx")
View(TorontoPoints)
View(TorontoPoints)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
coordinates(TorontoPoints) <- c("LNG", "LAT")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(xy, CRS("+proj=utm +zone=15 ellps=WGS84"))
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(TorontoPoints, CRS("+proj=utm +zone=15 ellps=WGS84"))
res
as(res, "SpatialPoints")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(TorontoPoints, CRS("+proj=utm +zone=15 ellps=WGS84"))
res
as(res, "SpatialPoints")
plot(TorontoPoints)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(TorontoPoints, CRS("+proj=utm +zone=15 ellps=WGS84"))
res
TorontoPoints <- (res, "SpatialPoints")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(TorontoPoints, CRS("+proj=utm +zone=15 ellps=WGS84"))
res
(res, "SpatialPoints")
rm(list = ls())
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
library(readxl)
TorontoPoints <- read_excel("C:/Users/nwals/Downloads/TorontoPoints.xlsx")
View(TorontoPoints)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
rm(list = ls())
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
library(readxl)
TorontoPoints <- read_excel("C:/Users/nwals/Downloads/TorontoPoints.xlsx")
View(TorontoPoints)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
#proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(TorontoPoints, CRS("+proj=utm +zone=15 ellps=WGS84"))
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
#proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(TorontoPoints, CRS("+proj=utm +zone=15 ellps=WGS84"))
rm(list = ls())
library(readxl)
TorontoPoints <- read_excel("C:/Users/nwals/Downloads/TorontoPoints.xlsx")
View(TorontoPoints)
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
write.csv(toronto_points,"C:\\Users\\nwals\\Desktop\\TorontoPoints.csv")
#coordinates(TorontoPoints) <- c("LNG", "LAT")
#proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(TorontoPoints, CRS("+proj=utm +zone=15 ellps=WGS84"))
install.packages("proj4")
library(proj4)
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
install.packages("proj4")
library(proj4)
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
rm(list = ls())
install.packages("proj4")
install.packages("proj4")
library(proj4)
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
library(readxl)
TorontoPoints <- read_excel("C:/Users/nwals/Downloads/TorontoPoints.xlsx")
View(TorontoPoints)
library(proj4)
library(sp)
library(leaflet)
library(tidyverse)
library(gstat)
library(sf)
library(readr)
library(spatstat)
library(maptools)
#right now I used the 'import dataset' tool to bring in the Excel data downloaded from the GitHub, this is trying to rip straight from GitHub
collisionsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Motor%20Vehicle%20Collisions/Motor%20Vehicle%20Collisions%20with%20KSI%20Data%20True.csv?token=AS22SR2ZGZO34O7CM56XBFTANDP44"
zonesfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/Stationary%20Sign%20locations/Stationary%20Sign%20Locations%20True%20-%20Stationary%20Sign%20locations.csv?token=AS22SR3YXJ3MMPTFKRTZFIDANDQKW"
schoolsfile="https://raw.githubusercontent.com/JustinBrassard/4GA3_Project_And_Proposal/main/data/point-school-locations-wgs84/School%20Locations%20True%20-%20School%20locations-all%20types%20data.csv?token=AS22SR3J4NEF54PS3OOARYTANDQOY"
Motor_Vehicle_Collisions_with_KSI_Data_True<-read_csv(url(collisionsfile))
Stationary_Sign_Locations_True<-read_csv(url(zonesfile))
School_Locations_True<-read_csv(url(schoolsfile))
#separation of 'geometry' column into two lng & lat columns for main data sets
School_Zones <- Stationary_Sign_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Collisions <- Motor_Vehicle_Collisions_with_KSI_Data_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
Schools <- School_Locations_True %>%
separate(geometry, into = c('lng', 'lat'), sep = ', ')
#df to sf conversion of main data sets
School_Zones.sf <- st_as_sf(School_Zones, coords = c("lng", "lat"))
Collisions.sf <- st_as_sf(Collisions, coords = c("lng", "lat"))
Schools.sf <- st_as_sf(Schools, coords = c("lng", "lat"))
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
toronto_boundary <- st_read(
"data/toronto-boundary-wgs84/citygcs_regional_mun_wgs84.shp")
plot(toronto_boundary)
toronto.lines = st_cast(toronto_boundary,"LINESTRING")
plot(toronto.lines)
#toronto.lines <- st_segmentize(toronto.lines, dfMaxLength = 1)
summary(toronto.lines)
toronto_points <- st_cast(toronto.lines, to = "POINT")
plot(toronto_points)
toronto_points <- as.data.frame(toronto_points)
#coordinates(TorontoPoints) <- c("LNG", "LAT")
proj4string(TorontoPoints) <- CRS("+proj=longlat +datum=WGS84")
